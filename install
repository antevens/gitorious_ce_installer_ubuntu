#!/bin/bash
if ! [ $(id -u) = 0 ]; then
   echo "You should run this script as root/superuser."
   exit 1
fi

echo "Starting the Gitorious installation..."

echo "Setting Gitorious hostname..."
source ./change_hostname

# Figure out we we have yum, apt or something else to use for installing Puppet
OS_FAMILY='Unknown'
apt-get help > /dev/null 2>&1 && OS_FAMILY='Debian'
yum help help > /dev/null 2>&1 && OS_FAMILY='RedHat'
if [ "${OS}" == 'SunOS' ]; then OS_FAMILY='Solaris'; fi
if [ `echo "${OSTYPE}" | grep 'darwin'` ]; then OS_FAMILY='Darwin'; fi
if [ "${OSTYPE}" == 'cygwin' ]; then OS_FAMILY='Cygwin'; fi
echo "Detected OS based on: ${OS_FAMILY}"


case ${OS_FAMILY} in
    "RedHat")
    # Redhat based
        echo "Disabling SELinux..."
        sed -i "s/enforcing/disabled/" /etc/selinux/config
        setenforce 0

        echo "Installing Ruby, RubyGems and Puppet..."
        yum install -y ruby ruby-devel rubygems
        gem update --system
        gem install -v 1.8.25 rubygems-update && ruby `gem env gemdir`/gems/rubygems-update-1.8.25/setup.rb
        gem install -y --no-ri --no-rdoc puppet -v=2.7.11

    ;;
    "Debian")
    # Debian based
        apt-get install -y ruby puppet ruby-dev
        gem install -v 1.8.25 rubygems-update && ruby `gem env gemdir`/gems/rubygems-update-1.8.25/setup.rb
    ;;
    "Darwin")
    # Mac OS X
                echo "Darwin based operating systems not yet supported!"
                exit 1
    ;;
    "Solaris")
    # Solaris, not implemented
                echo "Solaris/SunOS operating sytems not yet supported!"
                exit 1
    ;;
    *)
    # Everything else
                echo "Unable to determine operating system or handling not implemented yet!"
                exit 1
    ;;
esac

# Generic section, applied on all OSes

if [ "`cat modules/gitorious/manifests/database.pp | grep DB_PASSWORD`" ]; then
    echo "Randomizing db password in puppet recipe..."
    NEW_PASSWORD=$(dd if=/dev/random bs=1 count=4 2>/dev/null | sha256sum | head -c 40)
    sed -i "s/DB_PASSWORD/$NEW_PASSWORD/" modules/gitorious/manifests/database.pp
    sed -i "s/DB_PASSWORD/$NEW_PASSWORD/" modules/gitorious/files/config/database.yml
    echo "Db password updated."
fi

echo "Applying Puppet recipe (will take a while, please be patient)..."
ruby apply_puppet_recipe.rb
PUPPETRESULT=$?
[ $PUPPETRESULT -ne 0 ] && echo "Installation failed." && exit
echo "Puppet recipe applied successfully."

echo "Creating the database..."
cd /var/www/gitorious/app && bin/rake db:drop db:create db:migrate VERBOSE=false
echo "Database created."

echo "Building Thinking Sphinx index..."
cd /var/www/gitorious/app && bin/rake ts:rebuild VERBOSE=false
echo "Index created."

echo "Randomizing cookie_secret..."
NEW_TOKEN=$(dd if=/dev/random bs=1 count=4 2>/dev/null | sha256sum | head -c 40)
sed -i "s/cookie_secret:.*/cookie_secret: $NEW_TOKEN/" /var/www/gitorious/app/config/gitorious.yml
echo "Rails cookie randomized."

echo "Restarting services"
restart_gitorious

# Anonymous pingback on install
curl -s http://getgitorious.com/installer_completed > /dev/null

echo "--------------------"
echo "Your installation of Gitorious Community Edition is complete."
echo "This installer is created and supported by Gitorious AS."
echo "For professional, long-term support, please consider Gitorious Enterprise Edition."
echo "http://gitorious.com"
echo "--------------------"

echo "Done. Please reboot the server."
